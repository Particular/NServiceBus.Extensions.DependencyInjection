[assembly: System.Runtime.CompilerServices.InternalsVisibleTo(@"NServiceBus.Extensions.DependencyInjection.Tests, PublicKey=0024000004800000940000000602000000240000525341310004000001000100dde965e6172e019ac82c2639ffe494dd2e7dd16347c34762a05732b492e110f2e4e2e1b5ef2d85c848ccfb671ee20a47c8d1376276708dc30a90ff1121b647ba3b7259a6bc383b2034938ef0e275b58b920375ac605076178123693c6c4f1331661a62eba28c249386855637780e3ff5f23a6d854700eaa6803ef48907513b92")]
namespace NServiceBus
{
    [System.Obsolete("Use the externally managed container mode to integrate with third party dependenc" +
        "y injection containers. Will be removed in version 3.0.0.", true)]
    public static class ContainerExtensions
    {
        [System.Obsolete("Use the externally managed container mode to integrate with third party dependenc" +
            "y injection containers. The member currently throws a NotImplementedException. W" +
            "ill be removed in version 3.0.0.", true)]
        public static NServiceBus.ContainerSettings<TContainerBuilder> UseContainer<TContainerBuilder>(this NServiceBus.EndpointConfiguration configuration, Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder> serviceProviderFactory) { }
    }
    [System.Obsolete("Use the externally managed container mode to integrate with third party dependenc" +
        "y injection containers. Will be removed in version 3.0.0.", true)]
    public class ContainerSettings<TContainerBuilder>
    {
        [System.Obsolete("Use the externally managed container mode to integrate with third party dependenc" +
            "y injection containers. The member currently throws a NotImplementedException. W" +
            "ill be removed in version 3.0.0.", true)]
        public Microsoft.Extensions.DependencyInjection.IServiceCollection ServiceCollection { get; }
        [System.Obsolete("Use the externally managed container mode to integrate with third party dependenc" +
            "y injection containers. The member currently throws a NotImplementedException. W" +
            "ill be removed in version 3.0.0.", true)]
        public void ConfigureContainer(System.Action<TContainerBuilder> containerConfiguration) { }
    }
    [System.Obsolete("Use `EndpointWithExternallyManagedContainer` instead. Will be treated as an error" +
        " from version 3.0.0. Will be removed in version 4.0.0.", false)]
    public static class EndpointWithExternallyManagedServiceProvider
    {
        [System.Obsolete(@"NServiceBus supports Microsoft.Extensions.DependencyInjection directly. Change usage of `EndpointWithExternallyManagedServiceProvider` to `EndpointWithExternallyManagedContainer` and remove the reference to the NServiceBus.Extensions.DependencyInjection package. The member currently throws a NotImplementedException. Will be removed in version 3.0.0.", true)]
        public static NServiceBus.IStartableEndpointWithExternallyManagedContainer Create(NServiceBus.EndpointConfiguration endpointConfiguration, Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection) { }
    }
    [System.Obsolete("Use `IStartableEndpointWithExternallyManagedContainer` instead. Will be removed i" +
        "n version 3.0.0.", true)]
    public static class IStartableEndpointWithExternallyManagedContainerExtensions { }
}